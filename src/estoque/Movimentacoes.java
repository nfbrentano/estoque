/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package estoque;

import DAO.funcionariosDAO;
import DAO.movimentacoesDAO;
import DAO.pontoImobilizadoDAO;
import DAO.produtoDAO;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author nfbrentano
 */
public class Movimentacoes extends javax.swing.JFrame {

    /**
     * Creates new form CadastroProduto
     */
    public Movimentacoes() {
        initComponents();
        this.data();
        this.preencheJComboBoxModelo();
        this.preencheJComboBoxSetor();
        this.preencheJComboBoxFuncionarios();
        this.preencheID();
    }

    /**
     * Preenche campo de ID na tela do sistema
     */
    public void preencheID() {
        ResultSet result;
        String sql = "select max(idmovimentacoes+1) from movimentacoes";

        try {
            String url = "jdbc:postgresql://localhost:5432/trabalho";
            String usuario = "postgres";
            String senha = "postgres";
            Class.forName("org.postgresql.Driver");
            Connection con = DriverManager.getConnection(url, usuario, senha);
            Statement stm = con.createStatement();
            result = stm.executeQuery(sql);
            while (result.next()) {
                jTid.setText((result.getString("max")));
            }
            con.close();
        } catch (Exception e) {
            e.printStackTrace();

        }
    }

    /**
     * Preenche campo de Modelo na tela do sistema
     */
    public void preencheJComboBoxModelo() {
        ResultSet result;
        String sql = "SELECT * FROM modelo WHERE disponibilidade = true";

        try {
            String url = "jdbc:postgresql://localhost:5432/trabalho";
            String usuario = "postgres";
            String senha = "postgres";
            Class.forName("org.postgresql.Driver");
            Connection con = DriverManager.getConnection(url, usuario, senha);
            Statement stm = con.createStatement();
            result = stm.executeQuery(sql);
            while (result.next()) {
                jCBidModelo.addItem(result.getString("nome"));
            }
            con.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Preenche campo de setor na tela do sistema
     */
    public void preencheJComboBoxSetor() {
        ResultSet result;
        String sql = "SELECT * FROM pontoimobilizado";

        try {
            String url = "jdbc:postgresql://localhost:5432/trabalho";
            String usuario = "postgres";
            String senha = "postgres";
            Class.forName("org.postgresql.Driver");
            Connection con = DriverManager.getConnection(url, usuario, senha);
            Statement stm = con.createStatement();
            result = stm.executeQuery(sql);
            while (result.next()) {
                jCBsetor.addItem(result.getString("nome"));
            }
            con.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Preenche campo de funcionarios na tela do sistema
     */
    public void preencheJComboBoxFuncionarios() {
        ResultSet result;
        String sql = "SELECT * FROM funcionarios WHERE disponibilidade = true ";

        try {
            String url = "jdbc:postgresql://localhost:5432/trabalho";
            String usuario = "postgres";
            String senha = "postgres";
            Class.forName("org.postgresql.Driver");
            Connection con = DriverManager.getConnection(url, usuario, senha);
            Statement stm = con.createStatement();
            result = stm.executeQuery(sql);
            while (result.next()) {
                jCBfuncionarios.addItem(result.getString("nome"));
            }
            con.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Preenche campo de data atual na tela do sistema
     */
    public void data() {

        SimpleDateFormat dataFormat = new SimpleDateFormat("dd/MM/yyyy");
        SimpleDateFormat horaFormat = new SimpleDateFormat("HH:mm:ss");
        jThoraMovimentacao.setText(horaFormat.format(new Date()));
        jTdataMovimentacao.setText(dataFormat.format(new Date()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTid = new javax.swing.JTextField();
        jTdataMovimentacao = new javax.swing.JTextField();
        jThoraMovimentacao = new javax.swing.JTextField();
        jBsalvar = new javax.swing.JButton();
        jBsair = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jCBsetor = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jCBidModelo = new javax.swing.JComboBox<>();
        jCBtipoMovimentacao = new javax.swing.JComboBox<>();
        jCBfuncionarios = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Movimentações");
        setFocusTraversalPolicyProvider(true);
        setMaximumSize(new java.awt.Dimension(900, 495));
        setMinimumSize(new java.awt.Dimension(900, 495));
        setResizable(false);
        setSize(new java.awt.Dimension(900, 495));
        setType(java.awt.Window.Type.UTILITY);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/MovimentacoesProduto.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 325, 495));

        jLabel2.setText("Tipo de Movimentação* :");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 190, -1, -1));

        jLabel3.setText("ID :");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 150, -1, -1));

        jLabel4.setText("Data Movimentação* :");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 270, -1, -1));

        jTid.setEditable(false);
        jTid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTidActionPerformed(evt);
            }
        });
        getContentPane().add(jTid, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 150, 190, -1));

        jTdataMovimentacao.setEditable(false);
        jTdataMovimentacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTdataMovimentacaoActionPerformed(evt);
            }
        });
        getContentPane().add(jTdataMovimentacao, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 270, 190, -1));

        jThoraMovimentacao.setEditable(false);
        jThoraMovimentacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jThoraMovimentacaoActionPerformed(evt);
            }
        });
        getContentPane().add(jThoraMovimentacao, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 310, 190, -1));

        jBsalvar.setText("Salvar");
        jBsalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBsalvarActionPerformed(evt);
            }
        });
        getContentPane().add(jBsalvar, new org.netbeans.lib.awtextra.AbsoluteConstraints(481, 434, 70, -1));

        jBsair.setText("Sair");
        jBsair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBsairActionPerformed(evt);
            }
        });
        getContentPane().add(jBsair, new org.netbeans.lib.awtextra.AbsoluteConstraints(598, 434, 70, -1));

        jLabel6.setText("Hora Movimentação* :");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 310, -1, 10));

        jLabel7.setText("Tela de Cadastro de Movimentações");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 33, -1, -1));

        jLabel8.setText("Modelo* :");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 230, -1, -1));

        jLabel9.setText("Funcionario*:");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 390, -1, -1));

        jCBsetor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBsetorActionPerformed(evt);
            }
        });
        getContentPane().add(jCBsetor, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 350, 190, -1));

        jLabel12.setText("* Campos Obrigatórios.");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 477, -1, -1));

        jCBidModelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBidModeloActionPerformed(evt);
            }
        });
        getContentPane().add(jCBidModelo, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 230, 190, -1));

        jCBtipoMovimentacao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nenhum", "E", "S" }));
        getContentPane().add(jCBtipoMovimentacao, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 190, 190, -1));

        jCBfuncionarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBfuncionariosActionPerformed(evt);
            }
        });
        getContentPane().add(jCBfuncionarios, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 390, 190, -1));

        jLabel10.setText("Setor*:");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 350, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTidActionPerformed

    private void jTdataMovimentacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTdataMovimentacaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTdataMovimentacaoActionPerformed

    private void jThoraMovimentacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jThoraMovimentacaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jThoraMovimentacaoActionPerformed

    private void jBsairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBsairActionPerformed
        dispose();
    }//GEN-LAST:event_jBsairActionPerformed

    private void jCBsetorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBsetorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBsetorActionPerformed

    private void jCBidModeloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBidModeloActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBidModeloActionPerformed

    private void jBsalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBsalvarActionPerformed
        //variaveis que buscam informações da tela
        String tipomovimentacao = (String) jCBtipoMovimentacao.getSelectedItem();
        String datamovimentacao = jTdataMovimentacao.getText();
        String horamovimentacao = jThoraMovimentacao.getText();
        String modelo_idmodelo = produtoDAO.selectIdModelo((String) jCBidModelo.getSelectedItem());
        String funcionarios_idfuncionarios = funcionariosDAO.selectIdfuncionarios((String) jCBfuncionarios.getSelectedItem());
        String pontoimobilizado_idpontoimobilizado = pontoImobilizadoDAO.selectIdPontoImobilizado((String) jCBsetor.getSelectedItem());
        int funcionarios = jCBfuncionarios.getItemCount();
        int pontoimobilizado = jCBsetor.getItemCount();
        int modelo = jCBidModelo.getItemCount();
        String obrigatorio = "";
        boolean controle = false;
        //validação

        if (tipomovimentacao.equals("Nenhum")) {
            obrigatorio = obrigatorio + "\n - Tipo de Movimentação";
            controle = true;
        }
        if (modelo_idmodelo.equals("Nenhum")) {
            obrigatorio = obrigatorio + "\n - Modelo";
            controle = true;
        }
        if (funcionarios < 1) {
            obrigatorio = obrigatorio + "\n - Cadastre antes um Funcionário!";
            controle = true;
        }
        if (modelo < 1) {
            obrigatorio = obrigatorio + "\n - Cadastre antes um Produto!";
            controle = true;
        }
        if (pontoimobilizado < 1) {
            obrigatorio = obrigatorio + "\n - Cadastre antes um Setor!";
            controle = true;
        }

        if (controle == false) {
            //insere as movimentacoes com as informaçoes buscadas na tela
            movimentacoesDAO.insertMovimentacoes(tipomovimentacao, datamovimentacao, horamovimentacao, modelo_idmodelo, funcionarios_idfuncionarios, pontoimobilizado_idpontoimobilizado);
            dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Campos obrigatorios:" + obrigatorio);
        }

    }//GEN-LAST:event_jBsalvarActionPerformed

    private void jCBfuncionariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBfuncionariosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBfuncionariosActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBsair;
    private javax.swing.JButton jBsalvar;
    private javax.swing.JComboBox<String> jCBfuncionarios;
    private javax.swing.JComboBox<String> jCBidModelo;
    private javax.swing.JComboBox<String> jCBsetor;
    private javax.swing.JComboBox<String> jCBtipoMovimentacao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTdataMovimentacao;
    private javax.swing.JTextField jThoraMovimentacao;
    private javax.swing.JTextField jTid;
    // End of variables declaration//GEN-END:variables
}
